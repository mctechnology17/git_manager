# ====================================================
# FileName: git_manager.sh
# Author: Marcos Chow Castro <mctechnology170318@gmail.com>
# GitHub: https://github.com/mctechnology17
# Date: 14.11.2021 22:30
# ====================================================

### color ### {{{
BOLD="$(tput bold 2>/dev/null || printf '')"
GREY="$(tput setaf 0 2>/dev/null || printf '')"
UNDERLINE="$(tput smul 2>/dev/null || printf '')"
RED="$(tput setaf 1 2>/dev/null || printf '')"
GREEN="$(tput setaf 2 2>/dev/null || printf '')"
YELLOW="$(tput setaf 3 2>/dev/null || printf '')"
BLUE="$(tput setaf 4 2>/dev/null || printf '')"
MAGENTA="$(tput setaf 5 2>/dev/null || printf '')"
NO_COLOR="$(tput sgr0 2>/dev/null || printf '')"
BLACKBG="printf '\e[1;40;92m'"
#}}}

### git exist? ### {{{
which git > /dev/null
if test $? -ne 0
then
  printf '\e[1;40;92m'
  echo "${RED}$0: git is not installed. Please install it${NO_COLOR}"
  exit 1
fi
#}}}

### copyright ### {{{
copyright() {
cat <<END
  Copyright (c) 2021 Chow Castro, Marcos IvÃ¡n (Nickname: MC Technology)

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
END
  exit 1
}
#}}}

### usage ### {{{
usage (){
cat <<END
  Usage:
    ./git_manager -> simple use
    push          -> if you assigned the alias
    CTRL+p        -> when you are at the prompt, if the bindkey is activated for zsh or powershell
    <LEADER>p     -> for mapping on vim/nvim

    Already up to date. -> by default a git pull is applied, to avoid having conflicts with files
    2 files changed, 37 insertions(+), 15 deletions(-) -> status bar
    ==================================
    | GIT Manager by @mctechnology17 | -> name and author
    |--------------------------------|
    | [c]    config credential       | -> prolong use without password using http format (so NO SSH)
    | [y]    add, commit, push       | -> these 3 commands run at the same time
    | [t]    test: add, commit, push | -> IT WILL NOT BE ASKED AND THESE COMMANDS WILL BE EXECUTED WITHOUT INTERVENTION FROM THE USER
    | [ac]   add, commit             |
    | [p]    push                    |
    | [g]    name+mail config        | -> your name and your mail for the commits
    | [sw]   switch branch           |
    | [st]   status                  |
    | [l]    see my last commit      |
    |        press [q] to exit       |
    | [me]   merge                   |
    | [mk]   make branch             |
    | [ali]  alias to bash/zsh/fish  |
    | [bin]  cheack binary installed |
    | [all]  list all branches       |
    |        press [q] to exit       |
    | [rev]  revert the last commit  |
    | [del]  delete branch           |
    | [lic]  license                 |
    | [h]    help                    |
    |--------------------------------|
    | Press ENTER to exit or CTRL+C  |
    ==================================
    main -> current branch
END
  exit 1
}
#}}}

### is_binary_installed ### {{{
is_binary_installed() {
  type git
  type tig
}
#}}}

git_branche_prompt=$(git rev-parse --abbrev-ref HEAD)

### menu ### {{{
menu() {
  git_changed="$(git diff --shortstat)"
  echo "${BOLD}${BLUE}$git_changed${NO_COLOR}"
  printf '\e[1;40;92m'
  echo "${YELLOW}=================================="
  echo "| GIT Manager by @mctechnology17 |"
  echo "|--------------------------------|"
  echo "| [c]    config credential       |"
  echo "| [y]    add, commit, push       |"
  echo "| [t]    test: add, commit, push |"
  echo "| [ac]   add, commit             |"
  echo "| [p]    push                    |"
  echo "| [g]    name+mail config        |"
  echo "| [sw]   switch branch           |"
  echo "| [st]   status                  |"
  echo "| [l]    see my last commit      |"
  echo "|        press [q] to exit       |"
  echo "| [me]   merge                   |"
  echo "| [mk]   make branch             |"
  echo "| [ali]  alias to bash/zsh/fish  |"
  echo "| [bin]  cheack binary installed |"
  echo "| [all]  list all branches       |"
  echo "|        press [q] to exit       |"
  echo "| [rev]  revert the last commit  |"
  echo "| [del]  delete branch           |"
  echo "| [lic]  license                 |"
  echo "| [h]    help                    |"
  echo "|--------------------------------|"
  echo "| Press ENTER to exit or CTRL+C  |"
  echo "=================================="
  printf "$git_branche_prompt ->${NO_COLOR} "
}
#}}}

clear
git pull --ff-only
menu
read -r git_continue

### git_continue ### {{{
if [ "$git_continue" = "y" ]; then
  printf '\e[1;40;92m'
  echo "${YELLOW}+--------------------------------+"
  echo "|  Commit, example: update v1.0  |"
  echo "+--------------------------------+"
  echo "|      Press CTRL+C to exit      |"
  echo "+--------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_update
  printf '\e[1;40;92m'
  echo "${YELLOW}+--------------------------------+"
  echo "|  Branch, example: master/main  |"
  echo "+--------------------------------+"
  echo "|      Press CTRL+C to exit      |"
  echo "+--------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_branche
  git add -A
  git commit -m "$git_update"
  git push -u origin $git_branche
  printf '\e[1;40;92m'
  echo "${YELLOW}+---------------------------------"
  echo "| GIT Manager by @mctechnology17"
  echo "+---------------------------------"
  echo "| [User]    -> $(git config user.name)"
  echo "| [Email]   -> $(git config user.email)"
  echo "| [Commit]  -> $git_update"
  echo "| [Branche] -> $git_branche"
  echo "+---------------------------------${NO_COLOR}"
elif [ "$git_continue" = "p" ]; then
  printf '\e[1;40;92m'
  echo "${YELLOW}+--------------------------------+"
  echo "|  Branch, example: master/main  |"
  echo "+--------------------------------+"
  echo "|      Press CTRL+C to exit      |"
  echo "+--------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_branche
  git push -u origin $git_branche
  printf '\e[1;40;92m'
  echo "${YELLOW}+---------------------------------"
  echo "| GIT Manager by @mctechnology17"
  echo "+---------------------------------"
  echo "| [User]    -> $(git config user.name)"
  echo "| [Email]   -> $(git config user.email)"
  echo "| [Branche] -> $git_branche"
  echo "+---------------------------------${NO_COLOR}"
elif [ "$git_continue" = "ac" ]; then
  printf '\e[1;40;92m'
  echo "${YELLOW}+--------------------------------+"
  echo "|  Commit, example: update v1.0  |"
  echo "+--------------------------------+"
  echo "|      Press CTRL+C to exit      |"
  echo "+--------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_update
  git add -A
  git commit -m "$git_update"
  printf '\e[1;40;92m'
  echo "${YELLOW}+---------------------------------"
  echo "| GIT Manager by @mctechnology17"
  echo "+---------------------------------"
  echo "| [User]    -> $(git config user.name)"
  echo "| [Email]   -> $(git config user.email)"
  echo "| [Commit]  -> $git_update"
  echo "+---------------------------------${NO_COLOR}"
elif [ "$git_continue" = "g" ]; then
  clear
  printf '\e[1;40;92m'
  echo "${YELLOW}+--------------------------------+"
  echo "| Name, example: Martin Schmitz  |"
  echo "+--------------------------------+"
  echo "|      Press CTRL+C to exit      |"
  echo "+--------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_name
  git config --global user.name "$git_name"
  printf '\e[1;40;92m'
  echo "${YELLOW}+-----------------------------------------+"
  echo "| Mail, example: martin@zbh.uni-hamburg.de|"
  echo "+-----------------------------------------+"
  echo "|           Press CTRL+C to exit          |"
  echo "+-----------------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_mail
  git config --global user.email $git_mail
elif [ "$git_continue" = "ali" ]; then
  clear
  printf '\e[1;40;92m'
  echo "${YELLOW}+----------------------------+"
  echo "|   alias to bash/zsh/fish   |"
  echo "+----------------------------+"
  echo "| [z]  Add alias to .zshrc   |"
  echo "| [b]  Add alias to .bashrc  |"
  echo "| [f]  Add alias config.fish |"
  echo "+----------------------------+"
  echo "| Press CTRL+C/ENTER to exit |"
  echo "+----------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_alias
  if [ "$git_alias" = "z" ]; then
    [ -x "$(command -v zsh)" ] && echo "Add alias to ~/.zshrc $(echo "alias push='$PWD/git_manager.sh'" >> ~/.zshrc)"
  elif [ "$git_alias" = "b" ]; then
    echo "Add alias to ~/.bashrc $(echo "alias push='$PWD/git_manager.sh'" >> ~/.bashrc)"
  elif [ "$git_alias" = "f" ]; then
    [ -x "$(command -v fish)" ] && echo "Add alias to ~/.config/fish/config.fish $(echo "alias push "$PWD/git_manager.sh"" >> ~/.config/fish/config.fish)"
  else
    echo "${YELLOW}No change made!${NO_COLOR}"
    exit 1
  fi
  printf '\e[1;40;92m'
  echo "${YELLOW}+--------------------------------------+"
  echo "|                Usage                 |"
  echo "+--------------------------------------+"
  echo "| [push]    In a repository just type  |"
  echo "|           push in terminal to invoke |"
  echo "|           IMPORTANT: Restart your    |"
  echo "|           terminal to take effect    |"
  echo "+--------------------------------------+${NO_COLOR}"
elif [ "$git_continue" = "lic" ]; then
  copyright
elif [ "$git_continue" = "h" ]; then
  usage
elif [ "$git_continue" = "bin" ]; then
  is_binary_installed
elif [ "$git_continue" = "del" ]; then
  clear
  printf '\e[1;40;92m'
  echo "${YELLOW}+----------------------------------------------------+"
  echo "| Are you sure you want to delete this branch?[y/n]? |"
  echo "+----------------------------------------------------+"
  echo "|                  Press CTRL+C to exit              |"
  echo "+----------------------------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_del
  if [ "$git_del" = "y" ]; then
    printf '\e[1;40;92m'
    echo "${YELLOW}+-----------------------------------------+"
    echo "| Write the name of the branch to delete  |"
    echo "+-----------------------------------------+"
    echo "|          Press CTRL+C to exit           |"
    echo "+-----------------------------------------+"
    printf "$git_branche_prompt ->${NO_COLOR} "
    read -r git_tmp
    git branch -D $git_tmp
  else
    echo "${YELLOW}No change made!${NO_COLOR}"
    exit 1
  fi
elif [ "$git_continue" = "mk" ]; then
  clear
  printf '\e[1;40;92m'
  echo "${YELLOW}+-----------------------------------------+"
  echo "| Write the name of the branch to make    |"
  echo "+-----------------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_tmp
  git branch $git_tmp
elif [ "$git_continue" = "me" ]; then
  clear
  printf '\e[1;40;92m'
  echo "${YELLOW}+-----------------------------------------+"
  echo "| Write the name of the branch to merge   |"
  echo "+-----------------------------------------+"
  echo "|           Press CTRL+C to exit          |"
  echo "+-----------------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_tmp
  git merge $git_tmp
elif [ "$git_continue" = "sw" ]; then
  clear
  printf '\e[1;40;92m'
  echo "${YELLOW}+-----------------------------------------+"
  echo "| Write the name of the branch to switch  |"
  echo "+-----------------------------------------+"
  echo "|            Press CTRL+C to exit         |"
  echo "+-----------------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_tmp
  git switch $git_tmp
elif [ "$git_continue" = "rev" ]; then
  clear
  printf '\e[1;40;92m'
  echo "${YELLOW}+--------------------------------------------+"
  echo "|  Sure you want to reverse the change[y/n]? |"
  echo "+--------------------------------------------+"
  echo "|             Press CTRL+C to exit           |"
  echo "+--------------------------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_del
  if [ "$git_del" = "y" ]; then
    git revert HEAD~1..HEAD
  else
    echo "${YELLOW}No change made!${NO_COLOR}"
    exit 1
  fi
elif [ "$git_continue" = "all" ]; then
  clear
  git branch -a
elif [ "$git_continue" = "c" ]; then
  clear
  git config credential.helper store
  printf '\e[1;40;92m'
  echo "${YELLOW}+----------------------------+"
  echo "| How much time do you need? |"
  echo "+----------------------------+"
  echo "| [h]     1 hour             |"
  echo "| [hh]    2 hour             |"
  echo "| [d]     1 day              |"
  echo "| [dd]    2 day              |"
  echo "| [def]   default (15 Min)   |"
  echo "+----------------------------+"
  echo "|   Press CTRL+C to exit     |"
  echo "+----------------------------+"
  printf "$git_branche_prompt ->${NO_COLOR} "
  read -r git_cre
  if [ "$git_cre" = "h" ]; then
    git config --global credential.helper 'cache --timeout 3600'
    echo "${YELLOW}Time extended to 1 hour"
  elif [ "$git_cre" = "hh" ]; then
    git config --global credential.helper 'cache --timeout 7200'
    echo "${YELLOW}Time extended to 2 hour"
  elif [ "$git_cre" = "d" ]; then
    git config --global credential.helper 'cache --timeout 86400'
    echo "${YELLOW}Time extended to 1 day"
  elif [ "$git_cre" = "dd" ]; then
    git config --global credential.helper 'cache --timeout 172800'
    echo "${YELLOW}Time extended to 2 day"
  elif [ "$git_cre" = "def" ]; then
    git config --global credential.helper 'cache --timeout 900'
    echo "${YELLOW}Time extended to 15 Min(default)"
  else
    echo "${YELLOW}No change made!${NO_COLOR}"
    exit 1
  fi
elif [ "$git_continue" = "st" ]; then
  clear
  echo "${BOLD}${YELLOW}$(git diff --shortstat) ${NO_COLOR}"
  git status -v -s -b -u --column
elif [ "$git_continue" = "t" ]; then
  clear
  git_test="$(git rev-parse --abbrev-ref HEAD)"
  git add -A && git commit -m "test" && git push -u origin $git_test
  printf '\e[1;40;92m'
  echo "${YELLOW}+---------------------------------"
  echo "| GIT Manager by @mctechnology17"
  echo "+---------------------------------"
  echo "| [User]    -> $(git config user.name)"
  echo "| [Email]   -> $(git config user.email)"
  echo "| [Commit]  -> test"
  echo "| [Branche] -> $git_test"
  echo "+---------------------------------${NO_COLOR}"
elif [ "$git_continue" = "l" ]; then
  clear
  git log -1 --pretty=fuller --graph --date=short
else
  echo "${YELLOW}No change made!${NO_COLOR}"
  exit 1
fi
#}}}

# vim: set sw=2 ts=2 sts=2 et ft=sh fdm=marker:
